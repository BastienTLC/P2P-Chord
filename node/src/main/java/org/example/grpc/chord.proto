syntax = "proto3";

import "google/protobuf/empty.proto";
option java_package = "com.example.grpc.chord";
option java_outer_classname = "ChordProto";

service Chord {

  //--- common chord calls
  rpc successor (SuccessorRequest)  returns (SuccessorResponse) {}
  rpc join      (JoinRequest)       returns (JoinResponse) {}
  rpc stabilize (StabilizeRequest)  returns (StabilizeResponse) {}
  rpc notify    (NotifyRequest)     returns (NotifyResponse) {}
  rpc leave     (LeaveRequest)      returns (LeaveResponse) {}
  rpc ping      (PingRequest)       returns (PingResponse) {}
}

message NodeInfo {
  string id = 1;          // Unique identifier (e.g., hash of the IP or node id)
  string ip = 2;          // IP address of the node
  int32 port = 3;         // Port where the node is listening
}

// Request and Response for successor RPC call
message SuccessorRequest {
  string key_id = 1;      // ID of the key to find the successor for
}

message SuccessorResponse {
  NodeInfo node = 1;      // The node responsible for the given key
}

// Request and Response for join RPC call
message JoinRequest {
  NodeInfo new_node = 1;  // Node that wants to join the network
}

message JoinResponse {
  bool success = 1;       // Whether the join operation succeeded
  NodeInfo successor = 2; // Successor node of the new node
}

// Request and Response for stabilize RPC call
message StabilizeRequest {
  NodeInfo caller = 1;    // The node calling stabilize
}

message StabilizeResponse {
  bool success = 1;       // Whether stabilization succeeded
}

// Request and Response for notify RPC call
message NotifyRequest {
  NodeInfo caller = 1;    // The node notifying its successor
}

message NotifyResponse {
  bool success = 1;       // Whether the notify succeeded
}

// Request and Response for leave RPC call
message LeaveRequest {
  NodeInfo leaving_node = 1;  // The node leaving the Chord ring
}

message LeaveResponse {
  bool success = 1;       // Whether the leave operation was successful
}

// Request and Response for ping RPC call
message PingRequest {
  NodeInfo node = 1;      // The node that is pinging to check health
}

message PingResponse {
  bool alive = 1;         // Whether the node is alive
}

// Example message structure to store/retrieve data in the DHT
message Message {
  string id = 1;          // Unique message identifier
  int64 timestamp = 2;    // Timestamp of message creation
  string author = 3;      // Message author username
  string topic = 4;       // Message topic identifier
  string content = 5;     // Optional content of the message
  bytes data = 6;         // Optional data payload
}
